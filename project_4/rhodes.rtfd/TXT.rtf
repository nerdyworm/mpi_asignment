{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf540
{\fonttbl\f0\fnil\fcharset0 Monaco;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red100\green56\blue32;\red196\green26\blue22;\red28\green0\blue207;
\red170\green13\blue145;}
\margl1440\margr1440\vieww12820\viewh12400\viewkind0
\deftab480
\pard\tx480\pardeftab480\ql\qnatural\pardirnatural

\f0\fs20 \cf0 \CocoaLigature0 Benjamin Rhodes\
Project 4\
\
Code simply adds the required pragmas to the original program.  Also switched the \
k and i index for the sum calculation.  \
\
The software run much slower that expected using even a small number of \
threads.  I think that the problem size needs to be much larger in order to\
take advantage of multiple processors. \
\
All bellow data is average of 3 runs.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f1\fs24 \cf0 \CocoaLigature1 {{\NeXTGraphic Pasted Graphic.pdf \width9140 \height8860
}¬}
\f0\fs20 \CocoaLigature0 \
\pard\tx480\pardeftab480\ql\qnatural\pardirnatural
\cf0 \
outer_paralle.c\
----------------------------------------------------------------
\f1\fs24 \CocoaLigature1 \
\pard\tx480\pardeftab480\ql\qnatural\pardirnatural

\f0\fs20 \cf2 \CocoaLigature0 #include \cf3 <omp.h>\cf2 \
#include \cf3 <stdio.h>\cf2 \
#include \cf3 <stdlib.h>\cf2 \
\pard\tx480\pardeftab480\ql\qnatural\pardirnatural
\cf0 \
\pard\tx480\pardeftab480\ql\qnatural\pardirnatural
\cf2 #define M \cf4 500\cf2 \
#define N \cf4 500\cf2 \
#define THREADS \cf4 8\cf2 \
\pard\tx480\pardeftab480\ql\qnatural\pardirnatural
\cf0 \
\pard\tx480\pardeftab480\ql\qnatural\pardirnatural
\cf5 int\cf0  main(\cf5 int\cf0  argc, \cf5 char\cf0  *argv) \
\{\
  omp_set_num_threads(THREADS);\
\
  \cf5 int\cf0  i, j, k;\
  \cf5 double\cf0  sum;\
  \cf5 double\cf0  **A, **B, **C;\
  A = malloc(M*\cf5 sizeof\cf0 (\cf5 double\cf0  *));\
  B = malloc(M*\cf5 sizeof\cf0 (\cf5 double\cf0  *));\
  C = malloc(M*\cf5 sizeof\cf0 (\cf5 double\cf0  *));\
  \
  \cf5 for\cf0  (i = \cf4 0\cf0 ; i < M; i++) \{\
    A[i] = malloc(N*\cf5 sizeof\cf0 (\cf5 double\cf0 ));\
    B[i] = malloc(N*\cf5 sizeof\cf0 (\cf5 double\cf0 ));\
    C[i] = malloc(N*\cf5 sizeof\cf0 (\cf5 double\cf0 ));\
  \}\
  \
  \cf5 double\cf0  start, end;\
  \cf5 for\cf0  (i = \cf4 0\cf0 ; i < M; i++) \{\
    \cf5 for\cf0  (j = \cf4 0\cf0 ; j < N; j++) \{\
      A[i][j] = j*\cf4 1\cf0 ;\
      B[i][j] = i*j+\cf4 2\cf0 ;\
      C[i][j] = j-i*\cf4 2\cf0 ;\
    \}\
  \}\
  \
  start = omp_get_wtime();\
  \
  \cf2 #pragma omp parallel shared(A, B, C) private(i, j, k)\
\pard\tx480\pardeftab480\ql\qnatural\pardirnatural
\cf0   \{\
    \cf2 #pragma omp parallel for\cf0 \
    \cf5 for\cf0  (i = \cf4 0\cf0 ; i < M; i++) \
    \{\
      \cf5 for\cf0  (j = \cf4 0\cf0 ; j < N; j++) \
      \{\
        sum = \cf4 0\cf0 ;\
        \cf5 for\cf0  (k=\cf4 0\cf0 ; k < M; k++) \{\
          sum += A[i][k]*B[k][j];\
        \}\
        \
        C[i][j] = sum;\
      \}\
    \}\
  \}\
  \
  end = omp_get_wtime();\
  \
  printf(\cf3 "Time of computation: %f\\n"\cf0 , end-start);\
\}\
\
\
inner_parallel.c\
----------------------------------------------------------------\
\pard\tx480\pardeftab480\ql\qnatural\pardirnatural
\cf2 #include \cf3 <omp.h>\cf2 \
#include \cf3 <stdio.h>\cf2 \
#include \cf3 <stdlib.h>\cf2 \
\pard\tx480\pardeftab480\ql\qnatural\pardirnatural
\cf0 \
\pard\tx480\pardeftab480\ql\qnatural\pardirnatural
\cf2 #define M \cf4 50\cf2 \
#define N \cf4 50\cf2 \
#define THREADS \cf4 8\cf2 \
\pard\tx480\pardeftab480\ql\qnatural\pardirnatural
\cf0 \
\pard\tx480\pardeftab480\ql\qnatural\pardirnatural
\cf5 int\cf0  main(\cf5 int\cf0  argc, \cf5 char\cf0  *argv) \
\{\
  omp_set_num_threads(THREADS);\
  \
  \cf5 int\cf0  i, j, k;\
  \cf5 double\cf0  sum;\
  \cf5 double\cf0  **A, **B, **C;\
  A = malloc(M*\cf5 sizeof\cf0 (\cf5 double\cf0  *));\
  B = malloc(M*\cf5 sizeof\cf0 (\cf5 double\cf0  *));\
  C = malloc(M*\cf5 sizeof\cf0 (\cf5 double\cf0  *));\
  \
  \cf5 for\cf0  (i = \cf4 0\cf0 ; i < M; i++) \{\
    A[i] = malloc(N*\cf5 sizeof\cf0 (\cf5 double\cf0 ));\
    B[i] = malloc(N*\cf5 sizeof\cf0 (\cf5 double\cf0 ));\
    C[i] = malloc(N*\cf5 sizeof\cf0 (\cf5 double\cf0 ));\
  \}\
  \
  \cf5 double\cf0  start, end;\
  \cf5 for\cf0  (i = \cf4 0\cf0 ; i < M; i++) \{\
    \cf5 for\cf0  (j = \cf4 0\cf0 ; j < N; j++) \{\
      A[i][j] = j*\cf4 1\cf0 ;\
      B[i][j] = i*j+\cf4 2\cf0 ;\
      C[i][j] = j-i*\cf4 2\cf0 ;\
    \}\
  \}\
  \
  start = omp_get_wtime();\
  \
  \
  \cf5 for\cf0  (i = \cf4 0\cf0 ; i < M; i++) \
  \{\
    \cf2 #pragma omp parallel shared(A, B, C, i) private(j, k)\
\pard\tx480\pardeftab480\ql\qnatural\pardirnatural
\cf0     \{\
      \cf2 #pragma omp parallel for\cf0 \
      \cf5 for\cf0  (j = \cf4 0\cf0 ; j < N; j++) \
      \{\
        sum = \cf4 0\cf0 ;\
        \cf5 for\cf0  (k=\cf4 0\cf0 ; k < M; k++) \{\
          sum += A[i][k]*B[k][j];\
        \}\
        \
        C[i][j] = sum;\
      \}\
    \}\
  \}\
  \
  end = omp_get_wtime();\
  \
  printf(\cf3 "Time of computation: %f\\n"\cf0 , end-start);\
\}\
}